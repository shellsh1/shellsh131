/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.42
 * Generated at: 2015-09-21 11:02:11 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class Servlet_002dlifecycle_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005furl_0026_005fvar_005fvalue_005fnobody;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005furl_0026_005fvar_005fvalue_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005furl_0026_005fvar_005fvalue_005fnobody.release();
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!DOCTYPE html>\n");
      out.write("\n");
      out.write("\n");
      out.write("<html lang=\"en\">\n");
      out.write("<head>\n");
      out.write("\n");
      out.write("<meta charset=\"utf-8\">\n");
      out.write("<title>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${title}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("</title>\n");
      out.write("<meta name=\"generator\" content=\"Bootply\" />\n");
      out.write("<meta name=\"viewport\"\n");
      out.write("\tcontent=\"width=device-width, initial-scale=1, maximum-scale=1\">\n");
      if (_jspx_meth_c_005furl_005f0(_jspx_page_context))
        return;
      out.write("\n");
      out.write("<link href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${linkCss}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("bootstrap.min.css\" rel=\"stylesheet\">\n");
      out.write("<link\n");
      out.write("\thref=\"//netdna.bootstrapcdn.com/font-awesome/3.2.1/css/font-awesome.min.css\"\n");
      out.write("\trel=\"stylesheet\">\n");
      out.write("<!--[if lt IE 9]>\n");
      out.write("\t\t\t<script src=\"//html5shim.googlecode.com/svn/trunk/html5.js\"></script>\n");
      out.write("\t\t<![endif]-->\n");
      out.write("<link href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${linkCss}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("styles.css\" rel=\"stylesheet\">\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\t<header class=\"navbar navbar-default navbar-fixed-top\" role=\"banner\">\n");
      out.write("\t\t<div class=\"container\">\n");
      out.write("\t\t\t<div class=\"navbar-header\">\n");
      out.write("\t\t\t\t<button class=\"navbar-toggle\" type=\"button\" data-toggle=\"collapse\"\n");
      out.write("\t\t\t\t\tdata-target=\".navbar-collapse\">\n");
      out.write("\t\t\t\t\t<span class=\"sr-only\">Toggle navigation</span> <span\n");
      out.write("\t\t\t\t\t\tclass=\"icon-bar\"></span> <span class=\"icon-bar\"></span> <span\n");
      out.write("\t\t\t\t\t\tclass=\"icon-bar\"></span>\n");
      out.write("\t\t\t\t</button>\n");
      out.write("\t\t\t\t<a href=\"/\" class=\"navbar-brand\">Home</a>\n");
      out.write("\t\t\t</div>\n");
      out.write("\t\t\t<nav class=\"collapse navbar-collapse\" role=\"navigation\">\n");
      out.write("\t\t\t\t<ul class=\"nav navbar-nav\">\n");
      out.write("\t\t\t\t\t");
      if (_jspx_meth_c_005fforEach_005f0(_jspx_page_context))
        return;
      out.write("\n");
      out.write("\t\t\t\t</ul>\n");
      out.write("\t\t\t\t<ul class=\"nav navbar-right navbar-nav\">\n");
      out.write("\t\t\t\t\t<li class=\"dropdown\"><a href=\"#\" class=\"dropdown-toggle\"\n");
      out.write("\t\t\t\t\t\tdata-toggle=\"dropdown\"><i class=\"glyphicon glyphicon-search\"></i></a>\n");
      out.write("\t\t\t\t\t\t<ul class=\"dropdown-menu\" style=\"padding-left: 10px;\">\n");
      out.write("\t\t\t\t\t\t\t<form class=\"form-inline\">\n");
      out.write("\t\t\t\t\t\t\t\t<button type=\"submit\" class=\"btn btn-default pull-right\">\n");
      out.write("\t\t\t\t\t\t\t\t\t<i class=\"glyphicon glyphicon-search\"></i>\n");
      out.write("\t\t\t\t\t\t\t\t</button>\n");
      out.write("\t\t\t\t\t\t\t\t<input type=\"text\" class=\"form-control pull-left\"\n");
      out.write("\t\t\t\t\t\t\t\t\tplaceholder=\"Search\">\n");
      out.write("\t\t\t\t\t\t\t</form>\n");
      out.write("\t\t\t\t\t\t</ul></li>\n");
      out.write("\t\t\t\t</ul>\n");
      out.write("\t\t\t</nav>\n");
      out.write("\t\t</div>\n");
      out.write("\t</header>\n");
      out.write("\n");
      out.write("\t<div id=\"masthead\">\n");
      out.write("\t\t<div class=\"container\">\n");
      out.write("\t\t\t<div class=\"row\">\n");
      out.write("\t\t\t\t<div class=\"col-md-7\">\n");
      out.write("\t\t\t\t\t<h1>JAVA</h1>\n");
      out.write("\t\t\t\t\t<blockquote>\n");
      out.write("\t\t\t\t\t\t<p>\"Write once, run anywhere\"</p>\n");
      out.write("\t\t\t\t\t\t<small>by <cite>Sun Microsystems</cite></small>\n");
      out.write("\t\t\t\t\t</blockquote>\n");
      out.write("\t\t\t\t</div>\n");
      out.write("\t\t\t\t<div class=\"col-md-5\">\n");
      out.write("\t\t\t\t\t<div class=\"well well-lg\">\n");
      out.write("\t\t\t\t\t\t<div class=\"row\">\n");
      out.write("\t\t\t\t\t\t\t<div class=\"col-sm-12\">Ad Space</div>\n");
      out.write("\t\t\t\t\t\t</div>\n");
      out.write("\t\t\t\t\t</div>\n");
      out.write("\t\t\t\t</div>\n");
      out.write("\t\t\t</div>\n");
      out.write("\t\t</div>\n");
      out.write("\t\t<!-- /cont -->\n");
      out.write("\n");
      out.write("\n");
      out.write("\t</div>\n");
      out.write("\n");
      out.write("\t<div class=\"container\">\n");
      out.write("\t\t<div class=\"row\">\n");
      out.write("\n");
      out.write("\t\t\t<div class=\"col-md-12\">\n");
      out.write("\n");
      out.write("\t\t\t\t<div class=\"panel\">\n");
      out.write("\t\t\t\t\t<div class=\"panel-body\">\n");
      out.write("\t\t\t\t\t\t<div class=\"row\">\n");
      out.write("\t\t\t\t\t\t\t<div class=\"col-md-2 col-sm-3 text-center\">\n");
      out.write("\t\t\t\t\t\t\t\t<a class=\"story-img\" href=\"#\"><img class=\"img-thumbnail\" src=\"//placehold.it/100\"\n");
      out.write("\t\t\t\t\t\t\t\t\tstyle=\"width: 100px; height: 100px\" class=\"img-circle\"></a>\n");
      out.write("\t\t\t\t\t\t\t</div>\n");
      out.write("\t\t\t\t\t\t\t<div class=\"col-md-10 col-sm-9\">\n");
      out.write("\t\t\t\t\t\t\t\t<h3>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${post.title}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("</h3>\n");
      out.write("\t\t\t\t\t\t\t\t<div class=\"row\">\n");
      out.write("\t\t\t\t\t\t\t\t\t<div class=\"col-xs-9\">\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<p>Trong bài này, chúng ta sẽ tìm hiểu <b class=\"text-info\">Vòng đời của Servlet</b>.</p>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<p>Vòng đời của một servlet được quản lý bởi container. Container là nơi mà các servlet được triển khai(deploy). Khi một request gọi đến servlet, Container sẽ thực các bước sau</p>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<ol>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t<li>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t<p>Nếu như, servlet không tồn tại, web container sẽ thực hiện</p>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t<ul>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t<li><p>Nạp servlet class.</p></li>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t<li><p>Tạo một thể hiện của servlet class.</p></li>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t<li><p>Gọi phương thức <b class=\"text-info\">init()</b> để khởi tạo servlet.</p></li>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t</ul>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t</li>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t<li>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t<p>Gọi phương thức <b class=\"text-info\">service()</b> để xử lý các request đến từ phía client và trả về các respone từ server cho client.</p>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t</li>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t<li>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t<p>Để hủy một servlet, container sẽ gọi phương thức <b class=\"text-info\">destroy()</b> để thực hiện điều này.</p>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t</li>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t</ol>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<p>Nào cùng tìm hiểu chi tiết hơn về Vòng đời của Servlet nhé.</p>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<p>Bài hướng dẫn sử dụng các công cụ sau khi tiến hành:</p>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<ol>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t<li><b class=\"text-info\">eclipse-java-luna-SR2</b></li>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t<li><b class=\"text-info\">JDK 7. (jdk1.7.0_76)</b></li>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t<li><b class=\"text-info\">Tomcat 7</b></li>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t<li><b class=\"text-info\">Maven</b></li>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t</ol>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<h2>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t<u>Phương thức init() của servlet</u>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t</h2>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<p>1. Phương thức  init() sẽ được gọi duy nhất một lần trong vòng đời của servlet. Nó được gọi ngay khi servlet được tạo ra.\n");
      out.write("\t\t\t\t\t\t\t\t\t\tThông thường thì một servlet được tạo khi có một request URL gọi đến nó lần đầu tiên. Tuy nhiên chúng ta có thể chỉ định servlet sẽ được nạp và khởi tạo khi khởi động server. Bằng cách sử dụng thẻ load-on-startup trong file web.xml.</p>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<ul>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t<li><p>Nếu giá trị của thẻ <b class=\"text-info\">load-on-startup</b> là số âm, hoặc thẻ này không được khai báo: Container sẽ tự động nạp và khởi tạo servlet bất cứ khi nào nó cảm thấy là cần thiết.</p></li>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t<li><p>Nếu giá trị của thẻ <b class=\"text-info\">load-on-startup</b> là số dương, hoặc 0: Container phải nạp và khởi tạo servlet ngay khi server khởi động.</p></li>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t</ul>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<h4>Ví dụ minh họa : load-on-startup</h4>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<p>Cấu trúc project của mình như sau</p>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<img src=\"http://s6.postimg.org/scclivbkh/project_javavnn_com.png\" alt= \"Servlet Lifecycle\" class=\"img-thumbnail\"/>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<p>File web.xml mình khai báo như sau</p>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<img src=\"http://s6.postimg.org/k892rvej5/web.png\" alt= \"Servlet Lifecycle\" class=\"img-thumbnail\"/>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<p>Chú ý thông số load-on-startup = 0, tức là khi ta khởi động server lên thì servlet ServletLifecycle sẽ được khởi tạo và gọi phương thức init() kết quả thu được là ta sẽ nhìn thấy dòng <b class=\"text-info\">Goi phuong thuc init()</b>. trong của sổ theo dõi Console của eclipse.</p>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<p>Khởi động Tomcat server lên ta sẽ thấy kết quả như hình sau:</p>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<img src=\"http://s6.postimg.org/jk088xftd/loadonstartup0.png\" alt= \"Servlet Lifecycle\" class=\"img-thumbnail\"/>\t\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<p>Bây giờ, xóa dòng load-on-startup trong file web.xml đi, khởi động lại Tomcat server ta thu được kết quả sau</p>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<img src=\"http://s6.postimg.org/jla62chn5/loadonstartup_1.png\" alt= \"Servlet Lifecycle\" class=\"img-thumbnail\"/>\t\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<p>Ta không còn thấy dòng Goi phuong thuc init() trong màn hình console nữa, tức là servlet chưa được nạp và khởi tạo vào container.</p>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<p>Bây giờ, gọi servlet ServletLifecycle bằng đường dẫn URL sau <a href=\"http://localhost:8080/servlet-lifecyle/\">http://localhost:8080/servlet-lifecyle/</a> ta sẽ thấy kết quả như sau</p>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<img src=\"http://s6.postimg.org/j9sppl175/invokeservlet.png\" alt= \"Servlet Lifecycle\" class=\"img-thumbnail\"/>\t\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<p>Ta thấy trên màn hình console in ra 3 dòng sau: <b class=\"text-info\">Goi phuong thuc init()., Goi phuong thuc service()., Goi phuong thuc doGet().</b></p>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<p>Điều này có nghĩa là servlet ServletLifecycle được nạp và khởi tạo chỉ đến khi nó được gọi từ phía client. Tại đây chúng ta chỉ quan tâm đến việc in ra dòng Goi phuong thuc init().\n");
      out.write("\t\t\t\t\t\t\t\t\t\t, 2 dòng còn lại mình sẽ giải thích ở phần tiếp theo. Thú vị không?:)</p>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<h2>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t<u>Phương thức service() của servlet</u>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t</h2>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<p>Phương thức service() là phương thức chính để xử lý các request trong servlet. Servlet container sử dụng phương thức service() để đón nhận các request đến từ phía client và\n");
      out.write("\t\t\t\t\t\t\t\t\t\ttrả lại các respone từ phía server cho client.</p>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<p>Chức năng chính của phương thức service() là nhận các request từ phía client, sau đó nó sẽ gọi phương thức doGet,doPost, doPut, doDelete.... tương ứng với request để xử lý, tùy thuộc vào kiểu của request đến từ phía client.</p>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<p>Hai phương thức được dùng nhiều nhất trong servlet để xử lý các request là doGet() và doPost()</p>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<ul>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t<li>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t<p>Phương thức <b class=\"text-info\">doGet()</b>: xử lý các request đến từ phía client với kiểu request là GET.</p>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t</li>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t<li>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t<p>Phương thức <b class=\"text-info\">doPost()</b>: xử lý các request đến từ phía client với kiểu request là POST.</p>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t</li>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t</ul>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<h4>Ví dụ minh họa : doGet()</h4>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<p>Gọi đường dẫn sau bằng trình duyệt web bất kì <a href=\"http://localhost:8080/servlet-lifecyle/\">http://localhost:8080/servlet-lifecyle/</a> ta sẽ thấy</p>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<img src=\"http://s6.postimg.org/j9sppl175/invokeservlet.png\" alt= \"Servlet Lifecycle\" class=\"img-thumbnail\"/>\t\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<ul>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t<li>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t<p>Phương thức init() được gọi để khởi tạo servlet. Đồng thời in ra dòng sau: <b class=\"text-info\">Goi phuong thuc init()</b>.</p>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t</li>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t<li>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t<p>Phương thức service() đón nhận request và quyết định phương thức doGet() sẽ xử lý request này, bởi vì kiểu request gửi đến từ client là GET. Đồng thời in ra dòng sau: <b class=\"text-info\">Goi phuong thuc service().</b></p>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t</li>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t<li>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t<p>Phương thức doGet() xử lý request và làm những việc nó cần phải làm đối với request này tùy thuộc vào yêu cầu của người lập trình. Đồng thời in ra dòng sau: <b class=\"text-info\">Goi phuong thuc doGet().</b></p>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t</li>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t</ul>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<p>Để kiểm tra xem phương thức init() có phải là được gọi một lần duy nhất trong suốt chu kỳ sống của servlet hay không? mình thực hiện gửi request <a href=\"http://localhost:8080/servlet-lifecyle/\">http://localhost:8080/servlet-lifecyle/</a> 3 lần nữa,\n");
      out.write("\t\t\t\t\t\t\t\t\t\tvà kết quả là</p>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<img src=\"http://s6.postimg.org/9ivdzm2q9/invokeservlet3.png\" alt= \"Servlet Lifecycle\" class=\"img-thumbnail\"/>\t\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<p>Ta thấy chỉ duy nhất một dòng Goi phuong thuc init() được in ra sau 4 lần gọi Servlet, tức là phương thức init() chỉ được gọi một lần duy nhất khi servlet được tạo.</p>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<p>Việc thực hiện với phương thức doPost() hoàn toàn tương tự với phương thức doGet() nên mình chỉ thực hiện đến đây bỏ ví dụ với phương thức doPost().</p>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<h2>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t<u>Phương thức detroy() của servlet</u>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t</h2>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<p>Phương thức detroy() giống như phương thức init() nó cũng được gọi một lần duy nhất trong suốt chu kỳ sống của servlet. Dựa vào phương thức này, chúng ta có thể\n");
      out.write("\t\t\t\t\t\t\t\t\t\tthực hiện một vài công việc để giải phóng các tài nguyên mà chúng ta đã sử dụng trong servlet. Chẳng hạn, đóng kết nối tới database, ghi ra các cookie....Sau khi phương thức detroy() được gọi, servlet sẽ được ném vào vào bộ thu gom rác của JVM.</p>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<p>Toàn bộ bài viết, mình đã trình bày cách mà một servlet hoạt động như thế nào? các phương thức trong servlet làm gì? Hi vọng rằng bài viết sẽ giúp các bạn có cái nhìn chi tiết hơn về servlet trong J2EE.</p>\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<h3>Chúc các bạn thành công!</h3>\t\t\t\t\t\t\t\t\t\t\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\n");
      out.write("\t\t\t\t\t\n");
      out.write("\t\t\t\t\t\t\t\t\t</div>\n");
      out.write("\t\t\t\t\t\t\t\t\t<div class=\"col-xs-3\" id=\"rightCol\">\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<h4>Bài viết có liên quan</h4>\n");
      out.write("\t\t\t\t\t\t                <ul id=\"sidebar\">\n");
      out.write("\t\t\t\t\t\t                  <li></li>\n");
      out.write("\t\t\t\t\t\t\t\t          <li><a href=\"#sec0\">Cài đặt môi trường lập trình java.</a></li>\n");
      out.write("\t\t\t\t\t\t\t\t          <li><a href=\"#sec1\">Cài đặt và cấu hình Maven trên window.</a></li>\n");
      out.write("\t\t\t\t\t\t\t\t          <li><a href=\"#sec2\">Cài đặt và cấu hình Sysdeo Tomcat plugin cho Eclipse.</a></li>\n");
      out.write("\t\t\t\t\t\t\t\t          <li><a href=\"#sec3\">Tạo một Spring MVC Project trên Eclipse.</a></li>\n");
      out.write("\t\t\t\t\t\t\t\t          <li><a href=\"#sec4\">Section 4</a></li>\n");
      out.write("\t\t\t\t\t\t\t\t        </ul>\n");
      out.write("\t\t\t\t\t\t            </div>\n");
      out.write("\t\t\t\t\t\t\t\t</div>\n");
      out.write("\t\t\t\t\t\t\t\t<br> <br>\n");
      out.write("\t\t\t\t\t\t\t</div>\n");
      out.write("\t\t\t\t\t\t</div>\n");
      out.write("\t\t\t\t\t</div>\n");
      out.write("\t\t\t\t</div>\n");
      out.write("\t\t\t</div>\n");
      out.write("\t\t\t<!--/col-12-->\n");
      out.write("\t\t</div>\n");
      out.write("\t</div>\n");
      out.write("\t<div class=\"container\" id=\"footer\">\n");
      out.write("\t\t<div class=\"row\">\n");
      out.write("\t\t\t<div class=\"col col-sm-12\">\n");
      out.write("\n");
      out.write("\t\t\t\t<h1>Follow Us</h1>\n");
      out.write("\t\t\t\t<div class=\"btn-group\">\n");
      out.write("\t\t\t\t\t<a class=\"btn btn-twitter btn-lg\" href=\"#\"><i\n");
      out.write("\t\t\t\t\t\tclass=\"icon-twitter icon-large\"></i> Twitter</a> <a\n");
      out.write("\t\t\t\t\t\tclass=\"btn btn-facebook btn-lg\" href=\"#\"><i\n");
      out.write("\t\t\t\t\t\tclass=\"icon-facebook icon-large\"></i> Facebook</a> <a\n");
      out.write("\t\t\t\t\t\tclass=\"btn btn-google-plus btn-lg\" href=\"#\"><i\n");
      out.write("\t\t\t\t\t\tclass=\"icon-google-plus icon-large\"></i> Google+</a>\n");
      out.write("\t\t\t\t</div>\n");
      out.write("\n");
      out.write("\t\t\t</div>\n");
      out.write("\t\t</div>\n");
      out.write("\t</div>\n");
      out.write("\n");
      out.write("\t<hr>\n");
      out.write("\n");
      out.write("\t<footer>\n");
      out.write("\t\t<div class=\"container\">\n");
      out.write("\t\t\t<div class=\"row\">\n");
      out.write("\t\t\t\t<div class=\"col-sm-6\">\n");
      out.write("\t\t\t\t\t<ul class=\"list-inline\">\n");
      out.write("\t\t\t\t\t\t<li><i class=\"icon-facebook icon-2x\"></i></li>\n");
      out.write("\t\t\t\t\t\t<li><i class=\"icon-twitter icon-2x\"></i></li>\n");
      out.write("\t\t\t\t\t\t<li><i class=\"icon-google-plus icon-2x\"></i></li>\n");
      out.write("\t\t\t\t\t\t<li><i class=\"icon-pinterest icon-2x\"></i></li>\n");
      out.write("\t\t\t\t\t</ul>\n");
      out.write("\n");
      out.write("\t\t\t\t</div>\n");
      out.write("\t\t\t\t<div class=\"col-sm-6\">\n");
      out.write("\t\t\t\t\t<p class=\"pull-right\">\n");
      out.write("\t\t\t\t\t\tBuilt with <i class=\"icon-heart-empty\"></i> at <a\n");
      out.write("\t\t\t\t\t\t\thref=\"http://www.bootply.com\">Bootply</a>\n");
      out.write("\t\t\t\t\t</p>\n");
      out.write("\t\t\t\t</div>\n");
      out.write("\t\t\t</div>\n");
      out.write("\t\t</div>\n");
      out.write("\t</footer>\n");
      out.write("\t<!-- script references -->\n");
      out.write("\t");
      if (_jspx_meth_c_005furl_005f1(_jspx_page_context))
        return;
      out.write("\n");
      out.write("\t<script src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${linkJs}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("jquery.js\"></script>\n");
      out.write("\t<!-- Bootstrap Core JavaScript -->\n");
      out.write("\t<script src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${linkJs}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("bootstrap.min.js\"></script>\n");
      out.write("\t<script src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${linkJs}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("myjs.js\"></script>\n");
      out.write("\t<script type=\"text/javascript\">\n");
      out.write("\t\t$(function() {\n");
      out.write("\t\t\tvar page = new Home();\n");
      out.write("\t\t\tpage.init();\n");
      out.write("\t\t});\n");
      out.write("\t</script>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005furl_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:url
    org.apache.taglibs.standard.tag.rt.core.UrlTag _jspx_th_c_005furl_005f0 = (org.apache.taglibs.standard.tag.rt.core.UrlTag) _005fjspx_005ftagPool_005fc_005furl_0026_005fvar_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.UrlTag.class);
    _jspx_th_c_005furl_005f0.setPageContext(_jspx_page_context);
    _jspx_th_c_005furl_005f0.setParent(null);
    // /WEB-INF/jsp/Servlet-lifecycle.jsp(12,0) name = value type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005furl_005f0.setValue("/css/");
    // /WEB-INF/jsp/Servlet-lifecycle.jsp(12,0) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005furl_005f0.setVar("linkCss");
    int _jspx_eval_c_005furl_005f0 = _jspx_th_c_005furl_005f0.doStartTag();
    if (_jspx_th_c_005furl_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      _005fjspx_005ftagPool_005fc_005furl_0026_005fvar_005fvalue_005fnobody.reuse(_jspx_th_c_005furl_005f0);
      return true;
    }
    _005fjspx_005ftagPool_005fc_005furl_0026_005fvar_005fvalue_005fnobody.reuse(_jspx_th_c_005furl_005f0);
    return false;
  }

  private boolean _jspx_meth_c_005fforEach_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:forEach
    org.apache.taglibs.standard.tag.rt.core.ForEachTag _jspx_th_c_005fforEach_005f0 = (org.apache.taglibs.standard.tag.rt.core.ForEachTag) _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.get(org.apache.taglibs.standard.tag.rt.core.ForEachTag.class);
    _jspx_th_c_005fforEach_005f0.setPageContext(_jspx_page_context);
    _jspx_th_c_005fforEach_005f0.setParent(null);
    // /WEB-INF/jsp/Servlet-lifecycle.jsp(36,5) name = items type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
    _jspx_th_c_005fforEach_005f0.setItems(new org.apache.jasper.el.JspValueExpression("/WEB-INF/jsp/Servlet-lifecycle.jsp(36,5) '${categories}'",_el_expressionfactory.createValueExpression(_jspx_page_context.getELContext(),"${categories}",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
    // /WEB-INF/jsp/Servlet-lifecycle.jsp(36,5) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005fforEach_005f0.setVar("categories");
    int[] _jspx_push_body_count_c_005fforEach_005f0 = new int[] { 0 };
    try {
      int _jspx_eval_c_005fforEach_005f0 = _jspx_th_c_005fforEach_005f0.doStartTag();
      if (_jspx_eval_c_005fforEach_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\n");
          out.write("\t\t\t\t\t\t<li><a href=\"#\">");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${categories.categoryName}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
          out.write("</a></li>\n");
          out.write("\t\t\t\t\t");
          int evalDoAfterBody = _jspx_th_c_005fforEach_005f0.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fforEach_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } catch (java.lang.Throwable _jspx_exception) {
      while (_jspx_push_body_count_c_005fforEach_005f0[0]-- > 0)
        out = _jspx_page_context.popBody();
      _jspx_th_c_005fforEach_005f0.doCatch(_jspx_exception);
    } finally {
      _jspx_th_c_005fforEach_005f0.doFinally();
      _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.reuse(_jspx_th_c_005fforEach_005f0);
    }
    return false;
  }

  private boolean _jspx_meth_c_005furl_005f1(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:url
    org.apache.taglibs.standard.tag.rt.core.UrlTag _jspx_th_c_005furl_005f1 = (org.apache.taglibs.standard.tag.rt.core.UrlTag) _005fjspx_005ftagPool_005fc_005furl_0026_005fvar_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.UrlTag.class);
    _jspx_th_c_005furl_005f1.setPageContext(_jspx_page_context);
    _jspx_th_c_005furl_005f1.setParent(null);
    // /WEB-INF/jsp/Servlet-lifecycle.jsp(255,1) name = value type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005furl_005f1.setValue("/js/");
    // /WEB-INF/jsp/Servlet-lifecycle.jsp(255,1) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_c_005furl_005f1.setVar("linkJs");
    int _jspx_eval_c_005furl_005f1 = _jspx_th_c_005furl_005f1.doStartTag();
    if (_jspx_th_c_005furl_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      _005fjspx_005ftagPool_005fc_005furl_0026_005fvar_005fvalue_005fnobody.reuse(_jspx_th_c_005furl_005f1);
      return true;
    }
    _005fjspx_005ftagPool_005fc_005furl_0026_005fvar_005fvalue_005fnobody.reuse(_jspx_th_c_005furl_005f1);
    return false;
  }
}
